/**
 * @param {import('@ucanto/interface').Signer} id
 * @param {import('@ucanto/interface').Verifier} serviceDid
 * @param {import('@ucanto/interface').Receipt} receipt
 */
export function createConcludeInvocation(id: import('@ucanto/interface').Signer, serviceDid: import('@ucanto/interface').Verifier, receipt: import('@ucanto/interface').Receipt): ed25519.IssuedInvocationView<{
    can: "ucan/conclude";
    with: `did:${string}:${string}` & `did:${string}` & ed25519.Signer.Phantom<{
        protocol: "did:";
    }>;
    nb: W3sBlobCapabilities.Schema.InferStruct<{
        receipt: W3sBlobCapabilities.Schema.Schema<ed25519.Signer.Link<unknown, number, number, 0 | 1>, any>;
    }>;
}>;
/**
 * Store a blob to the service. The issuer needs the `blob/add`
 * delegated capability.
 *
 * Required delegated capability proofs: `blob/add`
 *
 * @param {import('./types.js').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `blob/add` delegated capability.
 * @param {Blob|Uint8Array} data Blob data.
 * @param {import('./types.js').RequestOptions} [options]
 * @returns {Promise<import('./types.js').BlobAddOk>}
 */
export function add({ issuer, with: resource, proofs, audience }: import('./types.js').InvocationConfig, data: Blob | Uint8Array, options?: import("./types.js").RequestOptions | undefined): Promise<import('./types.js').BlobAddOk>;
/**
 * List Blobs stored in the space.
 *
 * @param {import('./types.js').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `blob/list` delegated capability.
 * @param {import('./types.js').ListRequestOptions} [options]
 * @returns {Promise<import('./types.js').BlobListSuccess>}
 */
export function list({ issuer, with: resource, proofs, audience }: import('./types.js').InvocationConfig, options?: import("./types.js").ListRequestOptions | undefined): Promise<import('./types.js').BlobListSuccess>;
/**
 * Remove a stored Blob file by digest.
 *
 * @param {import('./types.js').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `blob/remove` delegated capability.
 * @param {import('multiformats').MultihashDigest} multihash of the blob
 * @param {import('./types.js').RequestOptions} [options]
 */
export function remove({ issuer, with: resource, proofs, audience }: import('./types.js').InvocationConfig, multihash: import('multiformats').MultihashDigest, options?: import("./types.js").RequestOptions | undefined): Promise<{
    error?: undefined;
} & {
    ok: import("@web3-storage/capabilities/types").BlobRemoveSuccess;
}>;
/**
 * Gets a stored Blob file by digest.
 *
 * @param {import('./types.js').InvocationConfig} conf Configuration
 * for the UCAN invocation. An object with `issuer`, `with` and `proofs`.
 *
 * The `issuer` is the signing authority that is issuing the UCAN
 * invocation(s). It is typically the user _agent_.
 *
 * The `with` is the resource the invocation applies to. It is typically the
 * DID of a space.
 *
 * The `proofs` are a set of capability delegations that prove the issuer
 * has the capability to perform the action.
 *
 * The issuer needs the `blob/get/0/1` delegated capability.
 * @param {import('multiformats').MultihashDigest} multihash of the blob
 * @param {import('./types.js').RequestOptions} [options]
 */
export function get({ issuer, with: resource, proofs, audience }: import('./types.js').InvocationConfig, multihash: import('multiformats').MultihashDigest, options?: import("./types.js").RequestOptions | undefined): Promise<{
    error?: undefined;
} & {
    ok: import("@web3-storage/capabilities/types").BlobGetSuccess;
}>;
import { ed25519 } from '@ucanto/principal';
import * as W3sBlobCapabilities from '@web3-storage/capabilities/web3.storage/blob';
//# sourceMappingURL=blob.d.ts.map